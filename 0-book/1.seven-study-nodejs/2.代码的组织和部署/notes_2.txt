
一、模块路径解析规则

1.内置模块（fs:操作文件,http:网络）
如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require('fs')。

2.node_modules目录
NodeJS定义了一个特殊的node_modules目录用于存放模块。主要用于存放开源库, 此目录中的所有文件不需要存放于版本控制中。
在该模块中使用require('foo/bar')方式加载模块时，则NodeJS依次尝试使用以下路径：
/home/user/node_modules/foo/bar (全局)
/home/node_modules/foo/bar （当前用户）
/node_modules/foo/bar (本地)

3.NODE_PATH环境变量
与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。
NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。
例如:
NODE_PATH=/home/user/lib:/home/lib
当使用require('foo/bar')的方式加载模块时，则NodeJS依次尝试以下路径。
/home/user/lib/foo/bar
/home/lib/foo/bar

二、包（package）
查看cat模块
我们已经知道了JS模块的基本单位是单个JS文件，但复杂些的模块往往由多个子模块组成。
为了便于管理和使用，我们可以把由多个子模块组成的大模块称做包，并把所有子模块放在同一个目录里。

index.js
当模块的文件名是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价。
var cat = require('/home/user/lib/cat');
var cat = require('/home/user/lib/cat/index');

package.json
如果想自定义入口模块的文件名和存放位置，就需要在包目录下包含一个package.json文件，并在其中指定入口模块的路径
{
    "name": "cat",
    "main": "./lib/main.js"
}

三、NPM
NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：
1.允许用户从NPM服务器下载别人编写的三方包到本地使用。
2.允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。
3.允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。

1.下载三方包
npm install argv
下载好之后，argv包就放在了工程目录下的node_modules目录中，因此在代码中只需要通过require('argv')的方式就好，无需指定三方包路径

下载指定版本(0.0.1)
npm install argv@0.0.1

package.json的字段做了扩展，允许在其中申明三方包依赖
{
    "name": "node-echo",
    "main": "./lib/echo.js",
    "dependencies": {
        "argv": "0.0.2"
    }
}
这样处理后，在工程目录下就可以使用npm install命令批量安装三方包了。
更重要的是，当以后node-echo也上传到了NPM服务器，别人下载这个包时，NPM会根据包中申明的三方包依赖自动下载进一步依赖的三方包。
如此一来，用户只需关心自己直接使用的三方包，不需要自己去解决所有包的依赖关系.

2.安装命令
npm install node-echo -g
注意-g是全局安装
npm install node-echo -g --save
注意--save是将下载的三方包信息保存在package.json中

3.发布代码
package.json里必要的字段
{
    "name": "node-echo",           # 包名，在NPM服务器上须要保持唯一
    "version": "1.0.0",            # 当前版本号
    "dependencies": {              # 三方包依赖，需要指定包名和版本号
        "argv": "0.0.2"
      },
    "main": "./lib/echo.js",       # 入口模块位置
    "bin" : {
        "node-echo": "./bin/node-echo"      # 命令行程序名和主模块位置
    }
}
之后，我们就可以在package.json所在目录下运行npm publish发布代码了。

4.版本号
语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。
+ 如果只是修复bug，需要更新Z位。
+ 如果是新增了功能，但是向下兼容，需要更新Y位。
+ 如果有大变动，向下不兼容，需要更新X位



